{"version":3,"file":"index.js","sources":["../src/enhanced-btn.ts","../src/preload.ts"],"sourcesContent":["const prefixName = \"\"\r\nconst varPrefixName = \"ComfyMasterVar_\"\r\n\r\n\r\nexport async function checkVarName() {\r\n  const p = await window.app.graphToPrompt()\r\n\r\n  for (const node of p.workflow.nodes) {\r\n    const name = node.type\r\n\r\n    if (name === `${prefixName}CTool_ImageWorkflowMetadataTestNode`) {\r\n      alert(\"存在节点 ‘图片元数据(测试)’\")\r\n      return false\r\n    }\r\n\r\n    if (name === `${prefixName}CTool_ImageMaskTestNode`) {\r\n      alert(\"存在节点 ‘遮罩数据(测试)’\")\r\n      return false\r\n    }\r\n  }\r\n\r\n  let findOutput = false\r\n  for (let node of Object.values(p.output)) {\r\n    if (!node[\"class_type\"].startsWith(`${prefixName}CMaster_Output`) && !node[\"class_type\"].startsWith(`${prefixName}CMaster_Input`)) {\r\n      continue\r\n    }\r\n\r\n    if (node[\"class_type\"].startsWith(`${prefixName}CMaster_Output`)) {\r\n      findOutput = true\r\n    }\r\n    const varName = node.inputs[\"var_name\"]\r\n    if (!varName || typeof varName !== \"string\" || varName.trim() === \"\") {\r\n      alert(`${node[\"class_type\"]} 没有变量名`)\r\n      return false\r\n    }\r\n  }\r\n\r\n  if (!findOutput) {\r\n    alert(\"没有找到：输出节点\")\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nfunction getGroup(id, workflow, outputs) {\r\n  const node = workflow.nodes.find(e => e.id === parseInt(id))\r\n  if (!node) {\r\n    return []\r\n  }\r\n\r\n  const ret = []\r\n\r\n  if (node.type === `${prefixName}CMaster_InputSwitchNode` || node.type === `${prefixName}CMaster_InputSwitchGroupNode`) {\r\n    const n = outputs[id][\"inputs\"][\"open_data\"]\r\n    if (n) {\r\n      ret.push(`single-${n[0]}`)\r\n    }\r\n  }\r\n\r\n  for (let group of workflow.groups) {\r\n    const [posX, posY] = node.pos\r\n    const [x, y, width, height] = group.bounding\r\n    if (posX >= x && posX <= x + width && posY >= y && posY <= y + height) {\r\n      ret.push(`group-${group.title}`)\r\n    }\r\n  }\r\n  ret.push(`single-${id}`)\r\n  return ret\r\n}\r\n\r\nexport async function exportPrompt() {\r\n  const p = await window.app.graphToPrompt()\r\n\r\n  const workflow = {...p.output}\r\n  let metadataNode: any\r\n  let metadataNodeKey: any\r\n  for (let [key, value] of Object.entries(workflow)) {\r\n    if (value.class_type === `${prefixName}CMaster_InputImage` || value[\"class_type\"] === `${prefixName}CMaster_InputMaskImageNode`) {\r\n      value.inputs[\"image\"] = \"\"\r\n    } else if (value.class_type === `${prefixName}LoadImageToBase64`) {\r\n      delete workflow[key]\r\n    } else if (value.class_type === `${prefixName}WorkflowMetadataConfig`) {\r\n      metadataNode = value\r\n      metadataNodeKey = key\r\n    }\r\n    if (value._meta) {\r\n      //@ts-ignore\r\n      value._meta.group = getGroup(key, p.workflow, p.output)\r\n    }\r\n\r\n  }\r\n\r\n  if (metadataNodeKey) {\r\n    delete workflow[metadataNodeKey]\r\n  }\r\n\r\n  let modelType = [\"其他\", \"SD1.5\", \"SDXL\", \"FLUX\"].indexOf(metadataNode?.inputs?.modelType || \"\")\r\n  if (modelType === -1) {\r\n    modelType = 0\r\n  }\r\n  let type = [\"默认\", \"局部重绘\", \"放大\", \"局部修复\"].indexOf(metadataNode?.inputs?.type || \"\")\r\n  if (type === -1) {\r\n    type = 0\r\n  }\r\n  const saveObj = {\r\n    code: metadataNode?.inputs?.code || \"\",\r\n    name:  metadataNode?.inputs?.name || \"\",\r\n    description:  metadataNode?.inputs?.description || \"\",\r\n    type: type,\r\n    modelType: modelType,\r\n    groupInfo: metadataNode?.inputs?.groupInfo || \"\",\r\n    maxWidth: metadataNode?.inputs?.maxWidth || 2048,\r\n    maxHeight: metadataNode?.inputs?.maxHeight || 2048,\r\n    workflow: workflow,\r\n    params: Object.values(workflow).filter(e => e.class_type.startsWith(`${prefixName}CMaster_Input`)).map(e => parseInput(e)),\r\n    outputs: Object.values(workflow).filter(e => e.class_type.startsWith(`${prefixName}CMaster_Output`)).map(e => parseOutput(e))\r\n  }\r\n  return {\r\n    name: metadataNode?.inputs?.name || \"\",\r\n    data: JSON.stringify(saveObj, null, 2)\r\n  }\r\n}\r\n\r\nconst ParameterType = {\r\n  None: 0,\r\n  Boolean: 1,\r\n  Number: 2,\r\n  String: 3,\r\n  Image: 4,\r\n  Range_Number: 5,\r\n  Enum_String: 6,\r\n  Float: 7,\r\n  Range_Float: 8,\r\n  Image_Mask: 9,\r\n  Switch: 10,\r\n  Switch_Group: 11,\r\n  Enum_Int: 12,\r\n  Enum_Float: 13,\r\n}\r\n\r\nconst algorithms = [\"\", \"固定值\", \"随机值\", \"递增\", \"递减\"]\r\n\r\nfunction parseInput(node) {\r\n  const type = node.class_type\r\n  const varName = node.inputs[\"var_name\"]\r\n  const newVarName = `${varPrefixName}${varName}`;\r\n  const description = node.inputs[\"description\"] || varName\r\n  const isExport = node.inputs[\"export\"]\r\n  const order = node.inputs[\"order\"]\r\n  const placeholder = node.inputs[\"placeholder\"] || \"\"\r\n  const group = (node[\"_meta\"] || {})[\"group\"] || []\r\n  const defaultGenerateAlgorithm = Math.max(0, algorithms.indexOf(node.inputs[\"default_generate_algorithm\"]))\r\n\r\n  let ret: any = {\r\n    key: newVarName,\r\n    name: description,\r\n    type: ParameterType.Image,\r\n    isExport: isExport,\r\n    order: order || 0,\r\n    defaultGenerateAlgorithm,\r\n    group,\r\n    placeholder\r\n  };\r\n\r\n  if (type === `${prefixName}CMaster_InputImage`) {\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Image,\r\n      isExport: isExport,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputString`) {\r\n    const text = node.inputs[\"text\"]\r\n\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.String,\r\n      isExport: isExport,\r\n      stringDefaultValue: text,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputEnumString`) {\r\n    const text = node.inputs[\"text\"]\r\n    const enums = node.inputs[\"enums\"]\r\n\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Enum_String,\r\n      isExport: isExport,\r\n      stringDefaultValue: text,\r\n      enumStringValue: enums,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputBoolean`) {\r\n    const num = node.inputs[\"value\"]\r\n\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Boolean,\r\n      isExport: isExport,\r\n      boolDefaultValue: num,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputInt`) {\r\n    const num = node.inputs[\"number\"]\r\n\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Number,\r\n      isExport: isExport,\r\n      numberDefaultValue: num,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputRangeInt`) {\r\n    const num = node.inputs[\"number\"]\r\n    const min = node.inputs[\"min\"]\r\n    const max = node.inputs[\"max\"]\r\n\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Range_Number,\r\n      isExport: isExport,\r\n      numberDefaultValue: num,\r\n      minNumberValue: min,\r\n      maxNumberValue: max,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputEnumInt`) {\r\n    const num = node.inputs[\"number\"]\r\n    const enums = node.inputs[\"enums\"]\r\n\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Enum_Int,\r\n      isExport: isExport,\r\n      numberDefaultValue: num,\r\n      enumStringValue: enums,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputFloat`) {\r\n    const num = node.inputs[\"number\"]\r\n\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Float,\r\n      isExport: isExport,\r\n      floatDefaultValue: num,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputRangeFloat`) {\r\n    const num = node.inputs[\"number\"]\r\n    const min = node.inputs[\"min\"]\r\n    const max = node.inputs[\"max\"]\r\n\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Range_Float,\r\n      isExport: isExport,\r\n      floatDefaultValue: num,\r\n      minFloatValue: min,\r\n      maxFloatValue: max,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputEnumFloat`) {\r\n    const num = node.inputs[\"number\"]\r\n    const enums = node.inputs[\"enums\"]\r\n\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Enum_Float,\r\n      isExport: isExport,\r\n      numberDefaultValue: num,\r\n      enumStringValue: enums,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  }else if (type === `${prefixName}CMaster_InputCheckpoint`) {\r\n    const text = node.inputs[\"ckpt_name\"]\r\n    const enums = node.inputs[\"checkpoints\"]\r\n\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Enum_String,\r\n      isExport: isExport,\r\n      stringDefaultValue: text,\r\n      enumStringValue: enums,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputLoraNode`) {\r\n    const text = node.inputs[\"lora_name\"]\r\n    const enums = node.inputs[\"loras\"]\r\n\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Enum_String,\r\n      isExport: isExport,\r\n      stringDefaultValue: text,\r\n      enumStringValue: enums,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputMaskImageNode`) {\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Image_Mask,\r\n      isExport: isExport,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  }else if (type === `${prefixName}CMaster_InputSwitchNode`) {\r\n    const num = node.inputs[\"value\"]\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Switch,\r\n      isExport: isExport,\r\n      boolDefaultValue: num,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  } else if (type === `${prefixName}CMaster_InputSwitchGroupNode`) {\r\n    const num = node.inputs[\"value\"]\r\n    ret = {\r\n      key: newVarName,\r\n      name: description,\r\n      type: ParameterType.Switch_Group,\r\n      isExport: isExport,\r\n      boolDefaultValue: num,\r\n      order: order || 0,\r\n      defaultGenerateAlgorithm,\r\n      group,\r\n      placeholder\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nconst OutputType = {\r\n  None: 0,\r\n  String: 1,\r\n  Image: 2,\r\n  Video: 3,\r\n  Audio: 4,\r\n}\r\n\r\nfunction parseOutput(node) {\r\n  const type = node.class_type\r\n  const varName = node.inputs[\"var_name\"]\r\n  const newVarName = `${varPrefixName}${varName}`;\r\n  const description = node.inputs[\"description\"] || varName\r\n  const isExport = node.inputs[\"export\"]\r\n  const order = node.inputs[\"order\"]\r\n  let ret = {\r\n    key: newVarName,\r\n    name: description,\r\n    type: OutputType.None,\r\n    isExport: isExport,\r\n    order: order || 0\r\n  }\r\n\r\n  if (type === `${prefixName}CMaster_OutputImage`) {\r\n    ret.type = OutputType.Image;\r\n  }\r\n  return ret;\r\n}\r\n\r\nasync function getFilename(defaultName: string) {\r\n\r\n  if (await window.app.api.getSetting('Comfy.PromptFilename')) {\r\n    defaultName = prompt('保存为:', defaultName)\r\n    if (!defaultName) return\r\n    if (!defaultName.toLowerCase().endsWith('.json')) {\r\n      defaultName += '.json'\r\n    }\r\n  }\r\n  return defaultName\r\n}\r\n\r\nexport async function exportJson(name: string, json: string) {\r\n  const blob = new Blob([json], {type: 'application/json'})\r\n\r\n  const file = await getFilename(`${name}.json`)\r\n  if (!file) return\r\n  window.comfyAPI.utils.downloadBlob(file, blob)\r\n}","import {checkVarName, exportPrompt, exportJson} from \"./enhanced-btn\"\r\nimport {ComfyExtension} from \"@comfyorg/comfyui-frontend-types\";\r\n\r\nasync function copy(text) {\r\n  let clipboard = navigator.clipboard || {\r\n    writeText: (str) => {\r\n      return new Promise(resolve => {\r\n        let copyInput = document.createElement('input');\r\n        copyInput.value = str;\r\n        document.body.appendChild(copyInput);\r\n        copyInput.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(copyInput);\r\n        resolve();\r\n      })\r\n    }\r\n  }\r\n  if (clipboard) {\r\n    await clipboard.writeText(text);\r\n  }\r\n}\r\n\r\nconst extension: ComfyExtension = {\r\n  name: \"ComfyMaster\",\r\n\r\n  commands: [\r\n    {\r\n      id: \"copy-profile\",\r\n      label: \"复制配置\",\r\n      function: async () => {\r\n        if (!await checkVarName()) {\r\n          return\r\n        }\r\n        const resp = await exportPrompt()\r\n        await copy(resp.data)\r\n        alert(\"配置复制到剪切板成功\")\r\n      }\r\n    },\r\n    {\r\n      id: \"export-profile\",\r\n      label: \"导出配置\",\r\n      function: async () => {\r\n        if (!await checkVarName()) {\r\n          return\r\n        }\r\n        const resp = await exportPrompt()\r\n        await exportJson(resp.name, resp.data)\r\n      }\r\n    }\r\n  ],\r\n  menuCommands: [\r\n    {\r\n      path: ['绘屿AI'],\r\n      commands: ['copy-profile']\r\n    },\r\n    {\r\n      path: ['绘屿AI'],\r\n      commands: ['export-profile']\r\n    }\r\n  ]\r\n}\r\n\r\napp.registerExtension(extension)\r\n\r\n"],"names":[],"mappings":"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"}